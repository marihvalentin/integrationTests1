*** AULA 1 - O que são Testes de Integração? ***

1. Vimos no último vídeo que os testes de integração, idealmente, deveriam ser escritos em menor proporção do que
os testes de unidade. Quais as motivações para isso?
• O tempo maior para execução. (Testes de integração tem um tempo de execução maior do que os testes de unidade.)
• O custo maior para manutenção. (Testes de integração costumam ser mais difíceis de escrever e manter, por conta
da complexidade maior.)
da complexidade maior.)


A pirâmide de testes é um estudo que demonstra os diferentes tipos de testes automatizados e suas vantagens e
desvantagens.

Artigo que demonstra tal estudo neste link: https://martinfowler.com/articles/practical-test-pyramid.html

Nesta aula, aprendemos:

   • Os diferentes tipos de testes automatizados que podemos escrever em uma aplicação;
   • A pirâmide de testes, de maneira bem resumida;
   • A configurar o projeto que será utilizado neste treinamento.


*** AULA 2 - Preparando o projeto para os testes ***

1. Hoje em dia é muito comum a utilização de frameworks que realizam injeção de dependências nas classes.
Do ponto de vista dos testes automatizados, qual cuidado devemos ter ao utilizar tal recurso em uma aplicação?
    • Sempre que possível utilizar injeção de dependências via construtor (Utilizar o construtor de uma classe para
    receber suas dependências favorece bastante a escrita de testes automatizados.)

2. Por que não é uma boa prática utilizar a mesma base de dados da aplicação nos testes de integração?
    • Os dados da aplicação podem influenciar nos testes, fazendo com que eles falhem (O ideal é sempre utilizar outra
    base de dados separada, exclusiva para a execução dos testes.)


Nesta aula, aprendemos:

    • Que às vezes precisamos adaptar o nosso código para poder escrever os teste automatizados;
    • Que devemos preferir injeção de dependências via construtor, para facilitar na escrita dos testes automatizados;
    • A realizar as configurações da JPA para a execução dos testes de integração.


*** AULA 3 - Organização do código de teste ***

1. Por que é importante organizar os códigos de testes, seguindo boas práticas e padrões de projeto?
    • Para facilitar a manutenção. (O código de teste também vai precisar de manutenção, portanto é importante que
    ele seja fácil de manter)


Nesta aula, aprendemos:

    • A escrever outros cenários de testes;
    • A como utilizar os recursos do JUnit para organizar o código de testes;
    • A importância de manter o código de testes bem organizado e fácil de manter.


*** AULA 4 - Testando métodos de escrits ***

1. Por que nos métodos de escrita precisamos iniciar uma transação?
    • Para que a JPA pudesse sincronizar as escritas com o banco de dados. (Alguns métodos, como os que fazem insert,
    update e delete, vão exigir uma transação ativa.)

