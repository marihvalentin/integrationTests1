*** AULA 1 - O que são Testes de Integração? ***

1. Vimos no último vídeo que os testes de integração, idealmente, deveriam ser escritos em menor proporção do que
os testes de unidade. Quais as motivações para isso?
• O tempo maior para execução. (Testes de integração tem um tempo de execução maior do que os testes de unidade.)
• O custo maior para manutenção. (Testes de integração costumam ser mais difíceis de escrever e manter, por conta
da complexidade maior.)
da complexidade maior.)


A pirâmide de testes é um estudo que demonstra os diferentes tipos de testes automatizados e suas vantagens e
desvantagens.

Artigo que demonstra tal estudo neste link: https://martinfowler.com/articles/practical-test-pyramid.html

Nesta aula, aprendemos:

   • Os diferentes tipos de testes automatizados que podemos escrever em uma aplicação;
   • A pirâmide de testes, de maneira bem resumida;
   • A configurar o projeto que será utilizado neste treinamento.


*** AULA 2 - Preparando o projeto para os testes ***

1. Hoje em dia é muito comum a utilização de frameworks que realizam injeção de dependências nas classes.
Do ponto de vista dos testes automatizados, qual cuidado devemos ter ao utilizar tal recurso em uma aplicação?
    • Sempre que possível utilizar injeção de dependências via construtor (Utilizar o construtor de uma classe para
    receber suas dependências favorece bastante a escrita de testes automatizados.)

2. Por que não é uma boa prática utilizar a mesma base de dados da aplicação nos testes de integração?
    • Os dados da aplicação podem influenciar nos testes, fazendo com que eles falhem (O ideal é sempre utilizar outra
    base de dados separada, exclusiva para a execução dos testes.)


Nesta aula, aprendemos:

    • Que às vezes precisamos adaptar o nosso código para poder escrever os teste automatizados;
    • Que devemos preferir injeção de dependências via construtor, para facilitar na escrita dos testes automatizados;
    • A realizar as configurações da JPA para a execução dos testes de integração.


*** AULA 3 - Organização do código de teste ***

1. Por que é importante organizar os códigos de testes, seguindo boas práticas e padrões de projeto?
    • Para facilitar a manutenção. (O código de teste também vai precisar de manutenção, portanto é importante que
    ele seja fácil de manter)


Nesta aula, aprendemos:

    • A escrever outros cenários de testes;
    • A como utilizar os recursos do JUnit para organizar o código de testes;
    • A importância de manter o código de testes bem organizado e fácil de manter.


*** AULA 4 - Testando métodos de escrits ***

1. Por que nos métodos de escrita precisamos iniciar uma transação?
    • Para que a JPA pudesse sincronizar as escritas com o banco de dados. (Alguns métodos, como os que fazem insert,
    update e delete, vão exigir uma transação ativa.)

2. Discutimos na última aula que alguns métodos, como os que fazem delete, insert e update, não são recomendados de
serem testados. Por qual motivo não deveríamos testar tais métodos?
    • Para evitar testes redundantes. (Quando tais métodos apenas delegam para a JPA, sem possuir nenhum tipo de
    lógica, os testes se tornam redundantes, uma vez que estávamos testando a JPA em si e não a aplicação.)


Nesta aula, aprendemos:

    • A escrever testes de métodos de escrita no banco de dados;
    • A lidar com transação na escrita dos testes;
    • A como identificar e evitar escrever testes desnecessários.

*** AULA 5 - Test Data Builder ***

1. Vimos no último vídeo como criar e utilizar uma classe que segue o padrão Teste Data Builder.
   Quais as vantagens de se utilizar tal padrão na escrita dos testes automatizados?

   • Melhorar a legibilidade do código de teste (Um Test Data Builder torna o código de teste muito mais legível.)
   • Evitar códigos duplicados (Podemos reaproveitar os Test Data Builder em diferentes classes de testes, evitando
   assim a duplicação de código.)

   Nesta aula, aprendemos:

    • A identificar os problemas de códigos duplicados nas classes de testes;
    • O padrão Test Data Builder;
    • Como implementar um Test Data Builder.


*** RESUMÃO ***

E, recapitulando, nós pegamos esse projeto, que já estava desenvolvido, com certas tecnologias e tinha essas classes
DAO e precisávamos escrever os testes automatizados dessas classes DAO. Começamos tentando criar um teste automatizado
e vimos aquele problema, a classe DAO está utilizando framework para fazer injeção de dependências e estava recebendo
o EntityManager como injeção de dependências no atributo e aí na hora de escrever a classe DAO, não conseguíamos passar
o EntityManager para fazer o teste.

Tivemos que trocar a injeção de dependências e ao invés de ser pelo atributo, para ser via construtor. E com isso
conseguimos criar, instanciar o nosso DAO e passar o EntityManager. Então como a aplicação rodando tem o servidor,
o framework de injeção de dependências e tem toda essa infraestrutura pronta para você. Aqui no teste não temos nada
disso, então precisamos correr atrás. Então tivemos que criar a classe JPAUtil, isolar a criação do EntityManager,
pegamos o persistence.xml, com as configurações da JPA para os testes automatizados.

Já pegamos pronto esse XML, na verdade, para não perder muito tempo em detalhes de JPA. Aí conseguimos dar andamento,
conseguimos escrever nossos testes. Então começamos a escrever os testes, precisávamos criar entidades, criar objetos
dessas entidades, persistir no banco de dados, chamar os métodos da nossa classe DAO para testarmos, fazer os asserts
para ver se tudo funcionou corretamente.

Aí começamos a ficar com o código poluído, utilizamos os recursos do próprio JUnit, @BeforeEach, @AfterEach para isolar
essa infraestrutura que cada teste precisa, a criação do EntityManager, da classe DAO, begin e rollback da transação.
Depois começamos a testar os métodos de consulta, de exclusão. Testamos também método de insert, de update.

Fizemos aquela discussão que esses métodos de insert, update e delete, que só delegam para a JPA não é muito
interessante de testar, já que nós não temos código nenhum nosso, só estamos delegando para uma biblioteca que já foi
testada.

Por fim, fechamos vendo essa questão dos testes Data Builder. Muitos testes vão precisar criar os objetos, várias
entidades e às vezes uma entidade tem relacionamentos com 3, 4, 6 entidades e aí para escrever o teste de uma entidade
dessa precisamos ter todas essas outras dependências. Então podemos isolar essa criação dos objetos em classes que
seguem o padrão builder, que são os testes Data Builder e essa classe tem os métodos bem legíveis do que
estamos preenchendo.

Os métodos devolvem a própria instância da classe para fazermos o encadeamento de métodos, como fizemos com
LeilaoBuilder, .comNome, .comValorInicial. Então o método de teste fica bem legível, fica bem fácil de entender.

